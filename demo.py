#!/usr/bin/env python3
"""
D√©monstration de l'outil d'analyse de m√©moire et de s√©curit√©.
"""

import os
import time
import logging
from pathlib import Path
from datetime import datetime
from core.analyze import MemoryAnalyzer
from core.monitor import SecurityMonitor
from core.report import ReportGenerator
from core.intel import ThreatIntelligence
from core.siem import SIEMConnector

def setup_demo_environment():
    """Configure l'environnement de d√©monstration."""
    # Cr√©er les dossiers n√©cessaires
    os.makedirs("demo/reports", exist_ok=True)
    os.makedirs("demo/logs", exist_ok=True)
    os.makedirs("demo/alerts", exist_ok=True)
    
    # Configurer le logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("demo/logs/demo.log"),
            logging.StreamHandler()
        ]
    )

def run_demo():
    """Ex√©cute la d√©monstration compl√®te."""
    print("\nüöÄ D√©marrage de la d√©monstration...\n")
    
    # 1. Initialisation
    print("1. Initialisation de l'analyseur...")
    analyzer = MemoryAnalyzer(
        output_dir="demo/reports",
        log_file="demo/logs/analysis.log"
    )
    
    # 2. Analyse des processus
    print("\n2. Analyse des processus en cours...")
    suspicious_processes = analyzer.analyze_processes()
    print(f"Processus suspects d√©tect√©s: {len(suspicious_processes)}")
    for proc in suspicious_processes:
        print(f"  - {proc.name} (PID: {proc.pid})")
        print(f"    Raisons: {', '.join(proc.suspicious_reasons)}")
    
    # 3. Analyse r√©seau
    print("\n3. Analyse des connexions r√©seau...")
    network_results = analyzer.analyze_network()
    print(f"Connexions suspectes d√©tect√©es: {len(network_results)}")
    for conn in network_results:
        if isinstance(conn, dict):
            print(f"  - {conn.get('process', 'Unknown')} -> {conn.get('remote_addr', 'Unknown')}:{conn.get('remote_port', 'Unknown')}")
        else:
            print(f"  - Connexion suspecte d√©tect√©e")
    
    # 4. Surveillance en temps r√©el
    print("\n4. D√©marrage de la surveillance en temps r√©el...")
    monitor = SecurityMonitor(analyzer)
    monitor.start(interval=5)  # V√©rification toutes les 5 secondes
    
    # Simuler quelques √©v√©nements suspects
    print("\n5. Simulation d'√©v√©nements suspects...")
    time.sleep(2)
    print("  - Tentative de connexion suspecte d√©tect√©e")
    time.sleep(2)
    print("  - Processus avec privil√®ges √©lev√©s d√©tect√©")
    time.sleep(2)
    print("  - Activit√© r√©seau anormale d√©tect√©e")
    
    # 6. G√©n√©ration de rapport
    print("\n6. G√©n√©ration du rapport de s√©curit√©...")
    report = analyzer.generate_report(
        format="html",
        include_network=True,
        include_processes=True,
        include_timeline=True
    )
    analyzer.save_results(report, "demo/reports/rapport_securite.html")
    print("  Rapport g√©n√©r√©: demo/reports/rapport_securite.html")
    
    # 7. Analyse comportementale
    print("\n7. Analyse comportementale...")
    for proc in suspicious_processes[:3]:  # Analyser les 3 premiers processus suspects
        behavior = analyzer.analyze_behavior(process=proc)
        print(f"  - {proc.name}:")
        print(f"    Niveau de suspicion: {behavior.suspicion_level}")
        print(f"    Raisons: {', '.join(behavior.reasons)}")
    
    # 8. Int√©gration SIEM
    print("\n8. Envoi des √©v√©nements au SIEM...")
    siem = SIEMConnector(
        host="demo-siem.example.com",
        port=8080,
        token="demo-token"
    )
    events = analyzer.get_recent_events()
    siem.send_events(events)
    print(f"  {len(events)} √©v√©nements envoy√©s au SIEM")
    
    # 9. Arr√™t de la surveillance
    print("\n9. Arr√™t de la surveillance...")
    monitor.stop()
    
    # 10. R√©sum√© final
    print("\nüìä R√©sum√© de la d√©monstration:")
    print(f"  - Processus suspects: {len(suspicious_processes)}")
    print(f"  - Connexions suspectes: {len(network_results)}")
    print(f"  - √âv√©nements analys√©s: {len(events)}")
    print(f"  - Rapports g√©n√©r√©s: 1")
    
    print("\n‚úÖ D√©monstration termin√©e avec succ√®s!")
    print("Les r√©sultats sont disponibles dans le dossier 'demo/'")

if __name__ == "__main__":
    setup_demo_environment()
    run_demo() 